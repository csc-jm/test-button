# Workflow will:
# - Checkout your repository
# - Perform a container image build
# - Push the built image to container registry
# - Log in to OpenShift cluster
# - Create an OpenShift app from the image and expose it to the internet
# - Remove the deployment upon deletion of the branch

name: Feature Preview

env:
  # To get a permanent token: https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  # Blank namespace in case of Rahti
  OPENSHIFT_NAMESPACE: ""

  APP_NAME: "test-button"

  # Refer to the 'port' input of https://github.com/redhat-actions/oc-new-app
  APP_PORT: ""

  IMAGE_REGISTRY: index.docker.io/${{ secrets.DOCKER_USERNAME }}
  IMAGE_REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  IMAGE_TAGS: ""

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
  push:
    branches:
      - "master"
      - "feature/**"
      - "refactor/**"
      - "bugfix/**"
      - "hotfix/**"
  delete:

jobs:
  # 🖊️ EDIT if you want to run vulnerability check on your project before deploying
  # the application. Please uncomment the below CRDA scan job and configure to run it in
  # your workflow. For details about CRDA action visit https://github.com/redhat-actions/crda/blob/main/README.md
  #
  # TODO: Make sure to add 'CRDA Scan' starter workflow from the 'Actions' tab.
  # For guide on adding new starter workflow visit https://docs.github.com/en/github-ae@latest/actions/using-workflows/using-starter-workflows

  # crda-scan:
  #  uses: ./.github/workflows/crda.yml
  #  secrets:
  #    CRDA_KEY: ${{ secrets.CRDA_KEY }}
  #    # SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}       # Either use SNYK_TOKEN or CRDA_KEY

  create-deployment:
    # 🖊️ Uncomment this if you are using CRDA scan step above
    # needs: crda-scan
    if: github.event_name == 'push'
    name: Build and deploy to Rahti via OpenShift
    runs-on: ubuntu-20.04

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
    - name: Start GitHub deployment
      id: deployment
      uses: chrnorm/deployment-action@v2
      with:
        token: '${{ github.token }}'
        environment: preview

    - name: Determine branch name
      if: github.event_name == 'push'
      run: |
        echo "BRANCH_NAME=$(echo '${{ github.ref_name }}' | sed -e 's/\//-/g')" >> $GITHUB_ENV

    - name: Check for required secrets
      uses: actions/github-script@v7
      with:
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.DOCKER_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`✅ All the required secrets are set`);
          }

    - name: Check out repository
      uses: actions/checkout@v4

    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=${{ env.BRANCH_NAME }}" | tee -a $GITHUB_ENV
      # echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

    # https://github.com/redhat-actions/buildah-build#readme
    - name: Build from Dockerfile
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.IMAGE_TAGS }}
        extra-args: |
          --storage-opt=overlay.mount_program=

        # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
        # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
        # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
        dockerfiles: |
          ./Dockerfile

    # https://github.com/redhat-actions/push-to-registry#readme
    - name: Push to registry
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    # The path the image was pushed to is now stored in ${{ steps.push-image.outputs.registry-path }}

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

    # https://github.com/redhat-actions/oc-login#readme
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
        openshift_token: ${{ env.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    # Deployment could be made by using https://github.com/redhat-actions/oc-new-app#readme
    # Here is a modified method of deploying and exposing the app to the internet
    - name: Create and expose app
      id: deploy-and-expose
      run: |
        echo "Checking for old deployments and deleting if found..."
        oc delete all --selector=app=${{ env.BRANCH_NAME }}
        echo "Creating Deployment from image of the application..."
        oc new-app --name=${{ env.APP_NAME }}-${{ env.BRANCH_NAME }} --labels=app=${{ env.BRANCH_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.BRANCH_NAME }}
        echo "Creating Service for the application..."
        oc create service clusterip ${{ env.BRANCH_NAME }} --tcp=8081:5430
        echo "Exposing the route for the service of this branch..."
        oc expose service ${{ env.BRANCH_NAME }} --hostname ${{ env.BRANCH_NAME }}.${{ env.APP_NAME }}.rahtiapp.fi
        echo "Annotate route with existing Let's Encrypt certificate..."
        oc annotate route ${{ env.BRANCH_NAME }} kubernetes.io/tls-acme='true'
        echo "Verifying if deployment is created successfully..."
        oc get all --selector=app=${{ env.BRANCH_NAME }}
        echo "ROUTE=https://${{ env.BRANCH_NAME }}.${{ env.APP_NAME }}.rahtiapp.fi" >> $GITHUB_OUTPUT
        echo "SELECTOR=${{ env.BRANCH_NAME }}" >> $GITHUB_OUTPUT

    - name: Print application URL
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""

    - name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@v2
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      with:
        token: '${{ github.token }}'
        environment-url: ${{ env.ROUTE }}
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}
        state: 'success'

    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@v2
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      with:
        token: '${{ github.token }}'
        environment-url: ${{ env.ROUTE }}
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}
        state: 'failure'


  delete-deployment:
    if: github.event_name == 'delete'
    name: Remove the branch preview from Rahti
    runs-on: ubuntu-20.04
    steps:
      - name: Determine branch name (on delete)
        if: github.event_name == 'delete'
        run: |
          echo "BRANCH_NAME=$(echo '${{ github.event.ref }}' | sed -e 's/\//-/g')" >> $GITHUB_ENV

      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

      # https://github.com/redhat-actions/oc-login#readme
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Delete app
        run: |
          echo "Deleting app with the removed branch..."
          oc delete all --selector=app=${{ env.BRANCH_NAME }}
